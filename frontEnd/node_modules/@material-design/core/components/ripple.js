import { Coord2d } from '../utils/coord';
var RippleController = (function () {
    function RippleController(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.options = options;
        this.ripples = new Set();
        this.onMouseDown = function (evt) {
            _this.activeRipple = _this.add(Coord2d.fromMouseEvent(evt, 'offset', _this.target), _this.options.color);
            _this.activeRipple.trigger(true);
            _this.ripples.add(_this.activeRipple);
            _this.activeRipple.onDestroy = function (ripple) { return _this.ripples.delete(ripple); };
        };
        this.onMouseUp = function () {
            if (_this.activeRipple) {
                _this.activeRipple.unlock();
            }
        };
    }
    RippleController.prototype.init = function (container, target) {
        if (target === void 0) { target = container.parentElement; }
        this.container = container;
        this.target = target;
        target.style.position = 'relative';
        target.style.overflow = 'hidden';
        target.addEventListener('mousedown', this.onMouseDown);
        document.addEventListener('mouseup', this.onMouseUp);
    };
    RippleController.prototype.destroy = function () {
        this.target.style.position = '';
        this.target.style.overflow = '';
        this.target.removeEventListener('mousedown', this.onMouseDown);
        document.removeEventListener('mouseup', this.onMouseUp);
        this.ripples.forEach(function (ripple) { return ripple.remove(); });
    };
    RippleController.prototype.add = function (pos, colour) {
        var ripple = new RippleRef(pos, colour);
        ripple.attach(this.container, this.target);
        return ripple;
    };
    return RippleController;
}());
export { RippleController };
var RippleRef = (function () {
    function RippleRef(position, colour) {
        var _this = this;
        this.position = position;
        this.colour = colour;
        this.element = document.createElement('div');
        this.locked = false;
        this.done = false;
        this.onDestroy = function () { return undefined; };
        this.element.classList.add('umd-ripple');
        this.setStyles({
            position: 'absolute',
            top: position.y + "px",
            left: position.x + "px",
            width: '1px',
            height: '1px',
            background: colour,
            transform: 'translate(-50%, -50%) scale(0)',
            'border-radius': '50%',
            'pointer-events': 'none',
            transition: '0.55s all cubic-bezier(0.0, 0.0, 0.2, 1)',
        });
        this.element.addEventListener('transitionend', function () {
            if (_this.done) {
                _this.remove();
                return;
            }
            _this.done = true;
            if (!_this.locked) {
                _this.out();
            }
        });
    }
    RippleRef.prototype.attach = function (container, parent) {
        if (parent === void 0) { parent = container.parentElement; }
        container.appendChild(this.element);
        this.parent = parent;
    };
    RippleRef.prototype.trigger = function (lock) {
        if (lock === void 0) { lock = false; }
        this.locked = lock;
        var size = this.distanceToCorner(this.parent.getBoundingClientRect()) * 2;
        this.setStyles({ transform: "translate(-50%, -50%) scale(" + size + ")" }, true);
    };
    RippleRef.prototype.unlock = function () {
        this.out();
    };
    RippleRef.prototype.remove = function () {
        if (this.element.parentElement) {
            this.element.parentElement.removeChild(this.element);
        }
        this.onDestroy(this);
    };
    RippleRef.prototype.out = function () {
        this.setStyles({ opacity: 0 }, true);
    };
    RippleRef.prototype.distanceToCorner = function (rect) {
        var distX = Math.max(this.position.x, rect.width - this.position.x);
        var distY = Math.max(this.position.y, rect.height - this.position.y);
        return Math.sqrt(distX * distX + distY * distY);
    };
    RippleRef.prototype.setStyles = function (styles, defer) {
        var _this = this;
        if (defer === void 0) { defer = false; }
        if (defer) {
            requestAnimationFrame(function () { return _this.setStyles(styles, false); });
            return;
        }
        Object.assign(this.element.style, styles);
    };
    return RippleRef;
}());
export { RippleRef };
